<?phpdefine('CAPTCHA_SESSION_ID', 'captcha_msg');define('CAPTCHA_WIDTH', 260); // max 500define('CAPTCHA_HEIGHT', 80); // max 200define('CAPTCHA_NUM_CHARS', 5);define('CAPTCHA_NUM_LINES', 0);define('CAPTCHA_CHAR_SHADOW', false);define('CAPTCHA_OWNER_TEXT', '');define('CAPTCHA_CHAR_SET', ''); // defaults to A-Zdefine('CAPTCHA_CASE_INSENSITIVE', true);define('CAPTCHA_BACKGROUND_IMAGES', 'bg.png');define('CAPTCHA_MIN_FONT_SIZE', 20);define('CAPTCHA_MAX_FONT_SIZE', 26);define('CAPTCHA_USE_COLOUR', true);define('CAPTCHA_FILE_TYPE', 'png');class PhpCaptcha{	var $oImage;	var $aFonts;	var $iWidth;	var $iHeight;	var $iNumChars;	var $iNumLines;	var $iSpacing;	var $bCharShadow;	var $sOwnerText;	var $aCharSet;	var $bCaseInsensitive;	var $vBackgroundImages;	var $iMinFontSize;	var $iMaxFontSize;	var $bUseColour;	var $sFileType;	var $sCode = '';		function PhpCaptcha($aFonts,$iWidth=CAPTCHA_WIDTH,$iHeight=CAPTCHA_HEIGHT)	{	$this->aFonts = $aFonts;		$this->SetNumChars(CAPTCHA_NUM_CHARS);		$this->SetNumLines(CAPTCHA_NUM_LINES);		$this->DisplayShadow(CAPTCHA_CHAR_SHADOW);		$this->SetOwnerText(CAPTCHA_OWNER_TEXT);		$this->SetCharSet(CAPTCHA_CHAR_SET);		$this->CaseInsensitive(CAPTCHA_CASE_INSENSITIVE);		$this->SetBackgroundImages(CAPTCHA_BACKGROUND_IMAGES);		$this->SetMinFontSize(CAPTCHA_MIN_FONT_SIZE);		$this->SetMaxFontSize(CAPTCHA_MAX_FONT_SIZE);		$this->UseColour(CAPTCHA_USE_COLOUR);		$this->SetFileType(CAPTCHA_FILE_TYPE);		$this->SetWidth($iWidth);		$this->SetHeight($iHeight);	}		function WaveDistortion()	{	$bg = ImageColorAllocate($this->oImage,hexdec("0xff"),hexdec("0xff"),hexdec("0xff"));		$orig = imagecreatetruecolor($this->iWidth,$this->iHeight);		imageColorTransparent($orig,$bg);		imagecopy($orig,$this->oImage,0,0,0,0,$this->iWidth,$this->iHeight);		imagefilledrectangle($this->oImage,0,0,$this->iWidth,$this->iHeight,$bg);			$v_f1 = rand(250,300)/100;		$v_w1 = rand(0,$this->iWidth*100)/100;		$v_f2 = rand(40,60)/100;		$v_w2 = rand(0,$this->iWidth*100)/100;		$v_f3 = rand(40,60)/100;		$v_w3 = rand(0,$this->iWidth*100)/100;		$y4_max = 0;		$y5_max = 0;		$an = array();		$as = array();		for ($x = 0; $x < $this->iWidth; $x++)		{	$y1 = intval(($this->iHeight/2)*(1-sin($v_f1*2*M_PI*($x+$v_w1)/$this->iWidth)));			$y2 = intval(($this->iHeight/2)*(1-sin($v_f2*2*M_PI*($x+$v_w2)/$this->iWidth)));			$y3 = intval(($this->iHeight/2)*(1-sin($v_f3*2*M_PI*($x+$v_w3)/$this->iWidth)));			$y4 = $y1*$y2/$this->iHeight/3;			$y5 = $y1*$y3/$this->iHeight/3;			$an[$x] = $y4;			$as[$x] = $y5;			if ($y4 > $y4_max)				$y4_max = $y4;			if ($y5 > $y5_max)				$y5_max = $y5;		}		for ($x = 0; $x < $this->iWidth; $x++)		{	$as[$x] = $this->iHeight-$y5_max-1+$as[$x];			for($y = 0; $y < $this->iHeight; $y++)			{	imagesetpixel($this->oImage,$x,intval($an[$x]+($y/$this->iHeight*($as[$x]-$an[$x]))),imagecolorat($orig,$x,$y));			}		}	}		function CalculateSpacing()	{	$this->iSpacing = (int)($this->iWidth / $this->iNumChars);	}		function SetWidth($iWidth)	{	$this->iWidth = $iWidth;		if ($this->iWidth > 500)	$this->iWidth = 500;		$this->CalculateSpacing();	}		function SetHeight($iHeight)	{	$this->iHeight = $iHeight;		if ($this->iHeight > 200)			$this->iHeight = 200; // to prevent performance impact	}	 	function SetNumChars($iNumChars)	{	$this->iNumChars = $iNumChars;		$this->CalculateSpacing();	}		function SetNumLines($iNumLines)	{	$this->iNumLines = $iNumLines;	}			function DisplayShadow($bCharShadow)	{	$this->bCharShadow = $bCharShadow;	}			function SetOwnerText($sOwnerText)	{	$this->sOwnerText = $sOwnerText;	}		function SetCharSet($vCharSet)	{	if (is_array($vCharSet))	$this->aCharSet = $vCharSet;		else		{	if ($vCharSet != '')			{	// split items on commas				$aCharSet = explode(',', $vCharSet);								// initialise array				$this->aCharSet = array();								// loop through items				foreach ($aCharSet as $sCurrentItem)				{	// a range should have 3 characters, otherwise is normal character					if (strlen($sCurrentItem) == 3)					{	// split on range character						$aRange = explode('-', $sCurrentItem);												// check for valid range						if (count($aRange) == 2 && $aRange[0] < $aRange[1])						{	// create array of characters from range							$aRange = range($aRange[0], $aRange[1]);							// add to charset array							$this->aCharSet = array_merge($this->aCharSet, $aRange);						}					}					else					{	$this->aCharSet[] = $sCurrentItem;					}				}			}		}	}		function CaseInsensitive($bCaseInsensitive)	{	$this->bCaseInsensitive = $bCaseInsensitive;	}		function SetBackgroundImages($vBackgroundImages)	{	$this->vBackgroundImages = $vBackgroundImages;	}		function SetMinFontSize($iMinFontSize)	{	$this->iMinFontSize = $iMinFontSize;	}		function SetMaxFontSize($iMaxFontSize)	{	$this->iMaxFontSize = $iMaxFontSize;	}		function UseColour($bUseColour)	{	$this->bUseColour = $bUseColour;	}		function SetFileType($sFileType)	{	if (in_array($sFileType, array('gif', 'png', 'jpeg')))			$this->sFileType = $sFileType;		else			$this->sFileType = 'jpeg';	}		function DrawLines()	{	for ($i = 0; $i < $this->iNumLines; $i++)		{	// allocate colour			if ($this->bUseColour)			{	$iLineColour = imagecolorallocate($this->oImage, rand(100, 250), rand(100, 250), rand(100, 250));			}			else			{	$iRandColour = rand(100, 250);				$iLineColour = imagecolorallocate($this->oImage, $iRandColour, $iRandColour, $iRandColour);			}						// draw line			imageline($this->oImage, rand(0, $this->iWidth), rand(0, $this->iHeight), rand(0, $this->iWidth), rand(0, $this->iHeight), $iLineColour);		}	}		function DrawOwnerText()	{	// allocate owner text colour		$iBlack = imagecolorallocate($this->oImage, 0, 0, 0);				// get height of selected font		$iOwnerTextHeight = imagefontheight(2);				// calculate overall height		$iLineHeight = $this->iHeight - $iOwnerTextHeight - 4;				// draw line above text to separate from CAPTCHA		imageline($this->oImage, 0, $iLineHeight, $this->iWidth, $iLineHeight, $iBlack);				// write owner text		imagestring($this->oImage, 2, 3, $this->iHeight - $iOwnerTextHeight - 3, $this->sOwnerText, $iBlack);				// reduce available height for drawing CAPTCHA		$this->iHeight = $this->iHeight - $iOwnerTextHeight - 5;	}		function GenerateCode()	{	// reset code		$this->sCode = '';				// loop through and generate the code letter by letter		for ($i = 0; $i < $this->iNumChars; $i++)		{	if (count($this->aCharSet) > 0)			{	// select random character and add to code string				$this->sCode .= $this->aCharSet[array_rand($this->aCharSet)];			}			else			{	// select random character and add to code string				$this->sCode .= chr(rand(65, 90));			}		}				// save code in session variable		if ($this->bCaseInsensitive)		{	$_SESSION[CAPTCHA_SESSION_ID] = strtoupper($this->sCode);		}		else		{	$_SESSION[CAPTCHA_SESSION_ID] = $this->sCode;		}	}		function DrawCharacters()	{	// loop through and write out selected number of characters		for ($i = 0; $i < strlen($this->sCode); $i++)		{	// select random font			$sCurrentFont = $this->aFonts[array_rand($this->aFonts)];						// select random colour			if ($this->bUseColour)			{	$iTextColour = imagecolorallocate($this->oImage, rand(0, 100), rand(0, 100), rand(0, 100));				if ($this->bCharShadow)				{	// shadow colour					$iShadowColour = imagecolorallocate($this->oImage, rand(0, 100), rand(0, 100), rand(0, 100));				}			}			else			{	$iRandColour = rand(0, 100);				$iTextColour = imagecolorallocate($this->oImage, $iRandColour, $iRandColour, $iRandColour);								if ($this->bCharShadow)				{	// shadow colour					$iRandColour = rand(0, 100);					$iShadowColour = imagecolorallocate($this->oImage, $iRandColour, $iRandColour, $iRandColour);				}			}						// select random font size			$iFontSize = rand($this->iMinFontSize, $this->iMaxFontSize);						// select random angle			$iAngle = rand(-30, 30);						// get dimensions of character in selected font and text size			$aCharDetails = imageftbbox($iFontSize, $iAngle, $sCurrentFont, $this->sCode[$i], array());						// calculate character starting coordinates			$iX = $this->iSpacing / 4 + $i * $this->iSpacing;			$iCharHeight = $aCharDetails[2] - $aCharDetails[5];			$iY = $this->iHeight / 2 + $iCharHeight / 4;						// write text to image			imagefttext($this->oImage, $iFontSize, $iAngle, $iX, $iY, $iTextColour, $sCurrentFont, $this->sCode[$i], array());						if ($this->bCharShadow)			{	$iOffsetAngle = rand(-30, 30);								$iRandOffsetX = rand(-5, 5);				$iRandOffsetY = rand(-5, 5);								imagefttext($this->oImage, $iFontSize, $iOffsetAngle, $iX + $iRandOffsetX, $iY + $iRandOffsetY, $iShadowColour, $sCurrentFont, $this->sCode[$i], array());			}		}	}		function WriteFile($sFilename)	{	if ($sFilename == '')		{	// tell browser that data is jpeg			$headertxt = "image/" . $this->sFileType;			header("Content-type: {$headertxt}");		}			switch ($this->sFileType)		{	case 'gif':				$sFilename != '' ? imagegif($this->oImage, $sFilename) : imagegif($this->oImage);				break;			case 'png':				$sFilename != '' ? imagepng($this->oImage, $sFilename) : imagepng($this->oImage);				break;			default:				$sFilename != '' ? imagejpeg($this->oImage, $sFilename) : imagejpeg($this->oImage);		}	}      	function Create($sFilename = '')	{	// check for required gd functions		if (!function_exists('imagecreate')			|| !function_exists("image$this->sFileType")			|| ($this->vBackgroundImages != '' && !function_exists('imagecreatetruecolor'))			)		{	return false;		}				// get background image if specified and copy to CAPTCHA		if (is_array($this->vBackgroundImages) || $this->vBackgroundImages != '')		{	// create new image			$this->oImage = imagecreatetruecolor($this->iWidth, $this->iHeight);						// create background image			if (is_array($this->vBackgroundImages))			{	$iRandImage = array_rand($this->vBackgroundImages);				$oBackgroundImage = imagecreatefrompng($this->vBackgroundImages[$iRandImage]);			}			else			{	$oBackgroundImage = imagecreatefrompng($this->vBackgroundImages);			}						// copy background image			imagecopy($this->oImage, $oBackgroundImage, 0, 0, 0, 0, $this->iWidth, $this->iHeight);						// free memory used to create background image			imagedestroy($oBackgroundImage);		}		else		{	// create new image			$this->oImage = imagecreate($this->iWidth, $this->iHeight);		}				// allocate white background colour		imagecolorallocate($this->oImage, 255, 255, 255);				// check for owner text		if ($this->sOwnerText != '')		{	$this->DrawOwnerText();		}				// check for background image before drawing lines		if (!is_array($this->vBackgroundImages) && $this->vBackgroundImages == '')		{	$this->DrawLines();		}				$this->GenerateCode();		$this->DrawCharacters();				//distort image		$this->WaveDistortion();				// write out image to file or browser		$this->WriteFile($sFilename);				// free memory used in creating image		imagedestroy($this->oImage);				return true;	}		// call this method statically	function Validate($sUserCode, $bCaseInsensitive = true)	{	if ($bCaseInsensitive)		{	$sUserCode = strtoupper($sUserCode);		}				if (!empty($_SESSION[CAPTCHA_SESSION_ID]) && $sUserCode == $_SESSION[CAPTCHA_SESSION_ID])		{	// clear to prevent re-use			unset($_SESSION[CAPTCHA_SESSION_ID]);			return true;		}		return false;	}}// example sub classclass PhpCaptchaColour extends PhpCaptcha{	function PhpCaptchaColour($aFonts, $iWidth = CAPTCHA_WIDTH, $iHeight = CAPTCHA_HEIGHT)	{	// call parent constructor		parent::PhpCaptcha($aFonts, $iWidth, $iHeight);				// set options		$this->UseColour(true);	}}?>